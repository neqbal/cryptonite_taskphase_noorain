# source cryptohack.org
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib


def is_pkcs7_padded(message):
    padding = message[-message[-1]:]
    return all(padding[i] == len(padding) for i in range(0, len(padding)))


def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:16]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)

    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, 16).decode('ascii')
    else:
        return plaintext.decode('ascii')


p = "0xde26ab651b92a129"
g = "0x2"
A = "0x557c6697a1f3912e"
B = "0xb602ea79f74a4d9c"
iv =  "2c20c98a76333ff4b5532a1fb70658f2"
ciphertext = "dd691ab2370ee2e9faf5836a721cf053a6e1814fa28125c188cf40fda20b6250"

p = int(p, 16)
g = int(g, 16)
A = int(A, 16)
B = int(B, 16)

# Generated by using descrete log calculator
a = 7886425781688647723
shared_secret = pow(B, a, p)

print(decrypt_flag(shared_secret, iv, ciphertext))
